diff --git a/examples/css2d_label.ts b/examples/css2d_label.ts
index f4fa083..787f584 100644
--- a/examples/css2d_label.ts
+++ b/examples/css2d_label.ts
@@ -10,7 +10,10 @@ import { GUI } from "three/addons/libs/lil-gui.module.min.js";
 
 let gui;
 
-let camera, scene, renderer, labelRenderer;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: THREE.WebGLRenderer,
+  labelRenderer: CSS2DRenderer;
 
 const layers = {
   "Toggle Name": function () {
@@ -31,7 +34,7 @@ const layers = {
 const clock = new THREE.Clock();
 const textureLoader = new THREE.TextureLoader();
 
-let moon;
+let moon: THREE.Mesh;
 
 init();
 animate();
diff --git a/examples/css3d_molecules.ts b/examples/css3d_molecules.ts
index ee79a49..1f7e79a 100644
--- a/examples/css3d_molecules.ts
+++ b/examples/css3d_molecules.ts
@@ -9,11 +9,13 @@ import {
 } from "three/addons/renderers/CSS3DRenderer.js";
 import { GUI } from "three/addons/libs/lil-gui.module.min.js";
 
-let camera, scene, renderer;
-let controls;
-let root;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: CSS3DRenderer;
+let controls: TrackballControls;
+let root: THREE.Object3D;
 
-const objects = [];
+const objects: Array<CSS3DObject | CSS3DSprite> = [];
 const tmpVec1 = new THREE.Vector3();
 const tmpVec2 = new THREE.Vector3();
 const tmpVec3 = new THREE.Vector3();
@@ -53,7 +55,7 @@ const params = {
 };
 
 const loader = new PDBLoader();
-const colorSpriteMap = {};
+const colorSpriteMap: { [element: string]: string | undefined } = {};
 const baseSprite = document.createElement("img");
 
 init();
@@ -77,7 +79,7 @@ function init() {
 
   renderer = new CSS3DRenderer();
   renderer.setSize(window.innerWidth, window.innerHeight);
-  document.getElementById("container").appendChild(renderer.domElement);
+  document.getElementById("container")!.appendChild(renderer.domElement);
 
   //
 
@@ -105,7 +107,7 @@ function init() {
   gui.open();
 }
 
-function changeVizType(value) {
+function changeVizType(value: number) {
   if (value === 0) showAtoms();
   else if (value === 1) showBonds();
   else showAtomsBonds();
@@ -157,7 +159,12 @@ function showAtomsBonds() {
 
 //
 
-function colorify(ctx, width, height, color) {
+function colorify(
+  ctx: CanvasRenderingContext2D,
+  width: number,
+  height: number,
+  color: THREE.Color
+) {
   const r = color.r,
     g = color.g,
     b = color.b;
@@ -174,7 +181,7 @@ function colorify(ctx, width, height, color) {
   ctx.putImageData(imageData, 0, 0);
 }
 
-function imageToCanvas(image) {
+function imageToCanvas(image: HTMLImageElement) {
   const width = image.width;
   const height = image.height;
 
@@ -183,7 +190,7 @@ function imageToCanvas(image) {
   canvas.width = width;
   canvas.height = height;
 
-  const context = canvas.getContext("2d");
+  const context = canvas.getContext("2d")!;
   context.drawImage(image, 0, 0, width, height);
 
   return canvas;
@@ -191,12 +198,12 @@ function imageToCanvas(image) {
 
 //
 
-function loadMolecule(model) {
+function loadMolecule(model: string) {
   const url = "models/pdb/" + model;
 
   for (let i = 0; i < objects.length; i++) {
     const object = objects[i];
-    object.parent.remove(object);
+    object.parent!.remove(object);
   }
 
   objects.length = 0;
@@ -207,13 +214,17 @@ function loadMolecule(model) {
     const json = pdb.json;
 
     geometryAtoms.computeBoundingBox();
-    geometryAtoms.boundingBox.getCenter(offset).negate();
+    geometryAtoms.boundingBox!.getCenter(offset).negate();
 
     geometryAtoms.translate(offset.x, offset.y, offset.z);
     geometryBonds.translate(offset.x, offset.y, offset.z);
 
-    const positionAtoms = geometryAtoms.getAttribute("position");
-    const colorAtoms = geometryAtoms.getAttribute("color");
+    const positionAtoms = geometryAtoms.getAttribute("position") as
+      | THREE.BufferAttribute
+      | THREE.InterleavedBufferAttribute;
+    const colorAtoms = geometryAtoms.getAttribute("color") as
+      | THREE.BufferAttribute
+      | THREE.InterleavedBufferAttribute;
 
     const position = new THREE.Vector3();
     const color = new THREE.Color();
@@ -227,7 +238,7 @@ function loadMolecule(model) {
 
       if (!colorSpriteMap[element]) {
         const canvas = imageToCanvas(baseSprite);
-        const context = canvas.getContext("2d");
+        const context = canvas.getContext("2d")!;
 
         colorify(context, canvas.width, canvas.height, color);
 
@@ -236,7 +247,7 @@ function loadMolecule(model) {
         colorSpriteMap[element] = dataUrl;
       }
 
-      const colorSprite = colorSpriteMap[element];
+      const colorSprite = colorSpriteMap[element]!;
 
       const atom = document.createElement("img");
       atom.src = colorSprite;
@@ -253,7 +264,9 @@ function loadMolecule(model) {
       objects.push(object);
     }
 
-    const positionBonds = geometryBonds.getAttribute("position");
+    const positionBonds = geometryBonds.getAttribute("position") as
+      | THREE.BufferAttribute
+      | THREE.InterleavedBufferAttribute;
 
     const start = new THREE.Vector3();
     const end = new THREE.Vector3();
diff --git a/examples/css3d_orthographic.ts b/examples/css3d_orthographic.ts
index b3bd43c..bf1664c 100644
--- a/examples/css3d_orthographic.ts
+++ b/examples/css3d_orthographic.ts
@@ -6,10 +6,13 @@ import {
   CSS3DObject,
 } from "three/addons/renderers/CSS3DRenderer.js";
 import { GUI } from "three/addons/libs/lil-gui.module.min.js";
+import { Controller } from "lil-gui";
 
-let camera, scene, renderer;
+let camera: THREE.OrthographicCamera,
+  scene: THREE.Scene,
+  renderer: THREE.WebGLRenderer;
 
-let scene2, renderer2;
+let scene2: THREE.Scene, renderer2: CSS3DRenderer;
 
 const frustumSize = 500;
 
@@ -84,18 +87,24 @@ function init() {
   renderer2 = new CSS3DRenderer();
   renderer2.setSize(window.innerWidth, window.innerHeight);
   renderer2.domElement.style.position = "absolute";
-  renderer2.domElement.style.top = 0;
+  renderer2.domElement.style.top = "0";
   document.body.appendChild(renderer2.domElement);
 
   const controls = new OrbitControls(camera, renderer2.domElement);
   controls.minZoom = 0.5;
   controls.maxZoom = 2;
 
-  function createPlane(width, height, cssColor, pos, rot) {
+  function createPlane(
+    width: number,
+    height: number,
+    cssColor: string,
+    pos: THREE.Vector3,
+    rot: THREE.Euler
+  ) {
     const element = document.createElement("div");
     element.style.width = width + "px";
     element.style.height = height + "px";
-    element.style.opacity = 0.75;
+    element.style.opacity = "0.75";
     element.style.background = cssColor;
 
     const object = new CSS3DObject(element);
@@ -142,12 +151,12 @@ function createPanel() {
 
   const settings = {
     setViewOffset() {
-      folder1.children[1].enable().setValue(window.innerWidth);
-      folder1.children[2].enable().setValue(window.innerHeight);
-      folder1.children[3].enable().setValue(0);
-      folder1.children[4].enable().setValue(0);
-      folder1.children[5].enable().setValue(window.innerWidth);
-      folder1.children[6].enable().setValue(window.innerHeight);
+      (folder1.children[1] as Controller).enable().setValue(window.innerWidth);
+      (folder1.children[2] as Controller).enable().setValue(window.innerHeight);
+      (folder1.children[3] as Controller).enable().setValue(0);
+      (folder1.children[4] as Controller).enable().setValue(0);
+      (folder1.children[5] as Controller).enable().setValue(window.innerWidth);
+      (folder1.children[6] as Controller).enable().setValue(window.innerHeight);
     },
     fullWidth: 0,
     fullHeight: 0,
@@ -156,12 +165,12 @@ function createPanel() {
     width: 0,
     height: 0,
     clearViewOffset() {
-      folder1.children[1].setValue(0).disable();
-      folder1.children[2].setValue(0).disable();
-      folder1.children[3].setValue(0).disable();
-      folder1.children[4].setValue(0).disable();
-      folder1.children[5].setValue(0).disable();
-      folder1.children[6].setValue(0).disable();
+      (folder1.children[1] as Controller).setValue(0).disable();
+      (folder1.children[2] as Controller).setValue(0).disable();
+      (folder1.children[3] as Controller).setValue(0).disable();
+      (folder1.children[4] as Controller).setValue(0).disable();
+      (folder1.children[5] as Controller).setValue(0).disable();
+      (folder1.children[6] as Controller).setValue(0).disable();
       camera.clearViewOffset();
     },
   };
@@ -175,7 +184,7 @@ function createPanel() {
       window.screen.width * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ fullWidth: val }))
+    .onChange((val: number) => updateCameraViewOffset({ fullWidth: val }))
     .disable();
   folder1
     .add(
@@ -185,19 +194,19 @@ function createPanel() {
       window.screen.height * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ fullHeight: val }))
+    .onChange((val: number) => updateCameraViewOffset({ fullHeight: val }))
     .disable();
   folder1
     .add(settings, "offsetX", 0, 256, 1)
-    .onChange((val) => updateCameraViewOffset({ x: val }))
+    .onChange((val: number) => updateCameraViewOffset({ x: val }))
     .disable();
   folder1
     .add(settings, "offsetY", 0, 256, 1)
-    .onChange((val) => updateCameraViewOffset({ y: val }))
+    .onChange((val: number) => updateCameraViewOffset({ y: val }))
     .disable();
   folder1
     .add(settings, "width", window.screen.width / 4, window.screen.width * 2, 1)
-    .onChange((val) => updateCameraViewOffset({ width: val }))
+    .onChange((val: number) => updateCameraViewOffset({ width: val }))
     .disable();
   folder1
     .add(
@@ -207,7 +216,7 @@ function createPanel() {
       window.screen.height * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ height: val }))
+    .onChange((val: number) => updateCameraViewOffset({ height: val }))
     .disable();
   folder1.add(settings, "clearViewOffset");
 }
@@ -219,6 +228,13 @@ function updateCameraViewOffset({
   y,
   width,
   height,
+}: {
+  fullWidth?: number;
+  fullHeight?: number;
+  x?: number;
+  y?: number;
+  width?: number;
+  height?: number;
 }) {
   if (!camera.view) {
     camera.setViewOffset(
diff --git a/examples/css3d_periodictable.ts b/examples/css3d_periodictable.ts
index 33d3514..c439385 100644
--- a/examples/css3d_periodictable.ts
+++ b/examples/css3d_periodictable.ts
@@ -600,11 +600,18 @@ const table = [
   7,
 ];
 
-let camera, scene, renderer;
-let controls;
-
-const objects = [];
-const targets = { table: [], sphere: [], helix: [], grid: [] };
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: CSS3DRenderer;
+let controls: TrackballControls;
+
+const objects: CSS3DObject[] = [];
+const targets: {
+  table: THREE.Object3D[];
+  sphere: THREE.Object3D[];
+  helix: THREE.Object3D[];
+  grid: THREE.Object3D[];
+} = { table: [], sphere: [], helix: [], grid: [] };
 
 init();
 animate();
@@ -630,12 +637,12 @@ function init() {
 
     const number = document.createElement("div");
     number.className = "number";
-    number.textContent = i / 5 + 1;
+    number.textContent = `${i / 5 + 1}`;
     element.appendChild(number);
 
     const symbol = document.createElement("div");
     symbol.className = "symbol";
-    symbol.textContent = table[i];
+    symbol.textContent = table[i] as string;
     element.appendChild(symbol);
 
     const details = document.createElement("div");
@@ -654,8 +661,8 @@ function init() {
     //
 
     const object = new THREE.Object3D();
-    object.position.x = table[i + 3] * 140 - 1330;
-    object.position.y = -(table[i + 4] * 180) + 990;
+    object.position.x = (table[i + 3] as number) * 140 - 1330;
+    object.position.y = -((table[i + 4] as number) * 180) + 990;
 
     targets.table.push(object);
   }
@@ -714,7 +721,7 @@ function init() {
 
   renderer = new CSS3DRenderer();
   renderer.setSize(window.innerWidth, window.innerHeight);
-  document.getElementById("container").appendChild(renderer.domElement);
+  document.getElementById("container")!.appendChild(renderer.domElement);
 
   //
 
@@ -723,22 +730,22 @@ function init() {
   controls.maxDistance = 6000;
   controls.addEventListener("change", render);
 
-  const buttonTable = document.getElementById("table");
+  const buttonTable = document.getElementById("table")!;
   buttonTable.addEventListener("click", function () {
     transform(targets.table, 2000);
   });
 
-  const buttonSphere = document.getElementById("sphere");
+  const buttonSphere = document.getElementById("sphere")!;
   buttonSphere.addEventListener("click", function () {
     transform(targets.sphere, 2000);
   });
 
-  const buttonHelix = document.getElementById("helix");
+  const buttonHelix = document.getElementById("helix")!;
   buttonHelix.addEventListener("click", function () {
     transform(targets.helix, 2000);
   });
 
-  const buttonGrid = document.getElementById("grid");
+  const buttonGrid = document.getElementById("grid")!;
   buttonGrid.addEventListener("click", function () {
     transform(targets.grid, 2000);
   });
@@ -750,7 +757,7 @@ function init() {
   window.addEventListener("resize", onWindowResize);
 }
 
-function transform(targets, duration) {
+function transform(targets: THREE.Object3D[], duration: number) {
   TWEEN.removeAll();
 
   for (let i = 0; i < objects.length; i++) {
@@ -774,7 +781,7 @@ function transform(targets, duration) {
       .start();
   }
 
-  new TWEEN.Tween(this)
+  new TWEEN.Tween({})
     .to({}, duration * 2)
     .onUpdate(render)
     .start();
