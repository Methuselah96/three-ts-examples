diff --git a/examples/css2d_label.ts b/examples/css2d_label.ts
index f4fa083..787f584 100644
--- a/examples/css2d_label.ts
+++ b/examples/css2d_label.ts
@@ -10,7 +10,10 @@ import { GUI } from "three/addons/libs/lil-gui.module.min.js";
 
 let gui;
 
-let camera, scene, renderer, labelRenderer;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: THREE.WebGLRenderer,
+  labelRenderer: CSS2DRenderer;
 
 const layers = {
   "Toggle Name": function () {
@@ -31,7 +34,7 @@ const layers = {
 const clock = new THREE.Clock();
 const textureLoader = new THREE.TextureLoader();
 
-let moon;
+let moon: THREE.Mesh;
 
 init();
 animate();
diff --git a/examples/css3d_molecules.ts b/examples/css3d_molecules.ts
index ee79a49..a73c6af 100644
--- a/examples/css3d_molecules.ts
+++ b/examples/css3d_molecules.ts
@@ -9,11 +9,13 @@ import {
 } from "three/addons/renderers/CSS3DRenderer.js";
 import { GUI } from "three/addons/libs/lil-gui.module.min.js";
 
-let camera, scene, renderer;
-let controls;
-let root;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: CSS3DRenderer;
+let controls: TrackballControls;
+let root: THREE.Object3D;
 
-const objects = [];
+const objects: Array<CSS3DObject | CSS3DSprite> = [];
 const tmpVec1 = new THREE.Vector3();
 const tmpVec2 = new THREE.Vector3();
 const tmpVec3 = new THREE.Vector3();
@@ -53,7 +55,7 @@ const params = {
 };
 
 const loader = new PDBLoader();
-const colorSpriteMap = {};
+const colorSpriteMap: { [element: string]: string | undefined } = {};
 const baseSprite = document.createElement("img");
 
 init();
@@ -77,7 +79,7 @@ function init() {
 
   renderer = new CSS3DRenderer();
   renderer.setSize(window.innerWidth, window.innerHeight);
-  document.getElementById("container").appendChild(renderer.domElement);
+  document.getElementById("container")!.appendChild(renderer.domElement);
 
   //
 
@@ -105,7 +107,7 @@ function init() {
   gui.open();
 }
 
-function changeVizType(value) {
+function changeVizType(value: number) {
   if (value === 0) showAtoms();
   else if (value === 1) showBonds();
   else showAtomsBonds();
@@ -157,7 +159,12 @@ function showAtomsBonds() {
 
 //
 
-function colorify(ctx, width, height, color) {
+function colorify(
+  ctx: CanvasRenderingContext2D,
+  width: number,
+  height: number,
+  color: THREE.Color
+) {
   const r = color.r,
     g = color.g,
     b = color.b;
@@ -174,7 +181,7 @@ function colorify(ctx, width, height, color) {
   ctx.putImageData(imageData, 0, 0);
 }
 
-function imageToCanvas(image) {
+function imageToCanvas(image: HTMLImageElement) {
   const width = image.width;
   const height = image.height;
 
@@ -183,7 +190,7 @@ function imageToCanvas(image) {
   canvas.width = width;
   canvas.height = height;
 
-  const context = canvas.getContext("2d");
+  const context = canvas.getContext("2d")!;
   context.drawImage(image, 0, 0, width, height);
 
   return canvas;
@@ -191,12 +198,12 @@ function imageToCanvas(image) {
 
 //
 
-function loadMolecule(model) {
+function loadMolecule(model: string) {
   const url = "models/pdb/" + model;
 
   for (let i = 0; i < objects.length; i++) {
     const object = objects[i];
-    object.parent.remove(object);
+    object.parent!.remove(object);
   }
 
   objects.length = 0;
@@ -207,7 +214,7 @@ function loadMolecule(model) {
     const json = pdb.json;
 
     geometryAtoms.computeBoundingBox();
-    geometryAtoms.boundingBox.getCenter(offset).negate();
+    geometryAtoms.boundingBox!.getCenter(offset).negate();
 
     geometryAtoms.translate(offset.x, offset.y, offset.z);
     geometryBonds.translate(offset.x, offset.y, offset.z);
@@ -227,7 +234,7 @@ function loadMolecule(model) {
 
       if (!colorSpriteMap[element]) {
         const canvas = imageToCanvas(baseSprite);
-        const context = canvas.getContext("2d");
+        const context = canvas.getContext("2d")!;
 
         colorify(context, canvas.width, canvas.height, color);
 
@@ -236,7 +243,7 @@ function loadMolecule(model) {
         colorSpriteMap[element] = dataUrl;
       }
 
-      const colorSprite = colorSpriteMap[element];
+      const colorSprite = colorSpriteMap[element]!;
 
       const atom = document.createElement("img");
       atom.src = colorSprite;
diff --git a/examples/css3d_orthographic.ts b/examples/css3d_orthographic.ts
index b3bd43c..bf1664c 100644
--- a/examples/css3d_orthographic.ts
+++ b/examples/css3d_orthographic.ts
@@ -6,10 +6,13 @@ import {
   CSS3DObject,
 } from "three/addons/renderers/CSS3DRenderer.js";
 import { GUI } from "three/addons/libs/lil-gui.module.min.js";
+import { Controller } from "lil-gui";
 
-let camera, scene, renderer;
+let camera: THREE.OrthographicCamera,
+  scene: THREE.Scene,
+  renderer: THREE.WebGLRenderer;
 
-let scene2, renderer2;
+let scene2: THREE.Scene, renderer2: CSS3DRenderer;
 
 const frustumSize = 500;
 
@@ -84,18 +87,24 @@ function init() {
   renderer2 = new CSS3DRenderer();
   renderer2.setSize(window.innerWidth, window.innerHeight);
   renderer2.domElement.style.position = "absolute";
-  renderer2.domElement.style.top = 0;
+  renderer2.domElement.style.top = "0";
   document.body.appendChild(renderer2.domElement);
 
   const controls = new OrbitControls(camera, renderer2.domElement);
   controls.minZoom = 0.5;
   controls.maxZoom = 2;
 
-  function createPlane(width, height, cssColor, pos, rot) {
+  function createPlane(
+    width: number,
+    height: number,
+    cssColor: string,
+    pos: THREE.Vector3,
+    rot: THREE.Euler
+  ) {
     const element = document.createElement("div");
     element.style.width = width + "px";
     element.style.height = height + "px";
-    element.style.opacity = 0.75;
+    element.style.opacity = "0.75";
     element.style.background = cssColor;
 
     const object = new CSS3DObject(element);
@@ -142,12 +151,12 @@ function createPanel() {
 
   const settings = {
     setViewOffset() {
-      folder1.children[1].enable().setValue(window.innerWidth);
-      folder1.children[2].enable().setValue(window.innerHeight);
-      folder1.children[3].enable().setValue(0);
-      folder1.children[4].enable().setValue(0);
-      folder1.children[5].enable().setValue(window.innerWidth);
-      folder1.children[6].enable().setValue(window.innerHeight);
+      (folder1.children[1] as Controller).enable().setValue(window.innerWidth);
+      (folder1.children[2] as Controller).enable().setValue(window.innerHeight);
+      (folder1.children[3] as Controller).enable().setValue(0);
+      (folder1.children[4] as Controller).enable().setValue(0);
+      (folder1.children[5] as Controller).enable().setValue(window.innerWidth);
+      (folder1.children[6] as Controller).enable().setValue(window.innerHeight);
     },
     fullWidth: 0,
     fullHeight: 0,
@@ -156,12 +165,12 @@ function createPanel() {
     width: 0,
     height: 0,
     clearViewOffset() {
-      folder1.children[1].setValue(0).disable();
-      folder1.children[2].setValue(0).disable();
-      folder1.children[3].setValue(0).disable();
-      folder1.children[4].setValue(0).disable();
-      folder1.children[5].setValue(0).disable();
-      folder1.children[6].setValue(0).disable();
+      (folder1.children[1] as Controller).setValue(0).disable();
+      (folder1.children[2] as Controller).setValue(0).disable();
+      (folder1.children[3] as Controller).setValue(0).disable();
+      (folder1.children[4] as Controller).setValue(0).disable();
+      (folder1.children[5] as Controller).setValue(0).disable();
+      (folder1.children[6] as Controller).setValue(0).disable();
       camera.clearViewOffset();
     },
   };
@@ -175,7 +184,7 @@ function createPanel() {
       window.screen.width * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ fullWidth: val }))
+    .onChange((val: number) => updateCameraViewOffset({ fullWidth: val }))
     .disable();
   folder1
     .add(
@@ -185,19 +194,19 @@ function createPanel() {
       window.screen.height * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ fullHeight: val }))
+    .onChange((val: number) => updateCameraViewOffset({ fullHeight: val }))
     .disable();
   folder1
     .add(settings, "offsetX", 0, 256, 1)
-    .onChange((val) => updateCameraViewOffset({ x: val }))
+    .onChange((val: number) => updateCameraViewOffset({ x: val }))
     .disable();
   folder1
     .add(settings, "offsetY", 0, 256, 1)
-    .onChange((val) => updateCameraViewOffset({ y: val }))
+    .onChange((val: number) => updateCameraViewOffset({ y: val }))
     .disable();
   folder1
     .add(settings, "width", window.screen.width / 4, window.screen.width * 2, 1)
-    .onChange((val) => updateCameraViewOffset({ width: val }))
+    .onChange((val: number) => updateCameraViewOffset({ width: val }))
     .disable();
   folder1
     .add(
@@ -207,7 +216,7 @@ function createPanel() {
       window.screen.height * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ height: val }))
+    .onChange((val: number) => updateCameraViewOffset({ height: val }))
     .disable();
   folder1.add(settings, "clearViewOffset");
 }
@@ -219,6 +228,13 @@ function updateCameraViewOffset({
   y,
   width,
   height,
+}: {
+  fullWidth?: number;
+  fullHeight?: number;
+  x?: number;
+  y?: number;
+  width?: number;
+  height?: number;
 }) {
   if (!camera.view) {
     camera.setViewOffset(
diff --git a/examples/css3d_periodictable.ts b/examples/css3d_periodictable.ts
index 33d3514..c439385 100644
--- a/examples/css3d_periodictable.ts
+++ b/examples/css3d_periodictable.ts
@@ -600,11 +600,18 @@ const table = [
   7,
 ];
 
-let camera, scene, renderer;
-let controls;
-
-const objects = [];
-const targets = { table: [], sphere: [], helix: [], grid: [] };
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: CSS3DRenderer;
+let controls: TrackballControls;
+
+const objects: CSS3DObject[] = [];
+const targets: {
+  table: THREE.Object3D[];
+  sphere: THREE.Object3D[];
+  helix: THREE.Object3D[];
+  grid: THREE.Object3D[];
+} = { table: [], sphere: [], helix: [], grid: [] };
 
 init();
 animate();
@@ -630,12 +637,12 @@ function init() {
 
     const number = document.createElement("div");
     number.className = "number";
-    number.textContent = i / 5 + 1;
+    number.textContent = `${i / 5 + 1}`;
     element.appendChild(number);
 
     const symbol = document.createElement("div");
     symbol.className = "symbol";
-    symbol.textContent = table[i];
+    symbol.textContent = table[i] as string;
     element.appendChild(symbol);
 
     const details = document.createElement("div");
@@ -654,8 +661,8 @@ function init() {
     //
 
     const object = new THREE.Object3D();
-    object.position.x = table[i + 3] * 140 - 1330;
-    object.position.y = -(table[i + 4] * 180) + 990;
+    object.position.x = (table[i + 3] as number) * 140 - 1330;
+    object.position.y = -((table[i + 4] as number) * 180) + 990;
 
     targets.table.push(object);
   }
@@ -714,7 +721,7 @@ function init() {
 
   renderer = new CSS3DRenderer();
   renderer.setSize(window.innerWidth, window.innerHeight);
-  document.getElementById("container").appendChild(renderer.domElement);
+  document.getElementById("container")!.appendChild(renderer.domElement);
 
   //
 
@@ -723,22 +730,22 @@ function init() {
   controls.maxDistance = 6000;
   controls.addEventListener("change", render);
 
-  const buttonTable = document.getElementById("table");
+  const buttonTable = document.getElementById("table")!;
   buttonTable.addEventListener("click", function () {
     transform(targets.table, 2000);
   });
 
-  const buttonSphere = document.getElementById("sphere");
+  const buttonSphere = document.getElementById("sphere")!;
   buttonSphere.addEventListener("click", function () {
     transform(targets.sphere, 2000);
   });
 
-  const buttonHelix = document.getElementById("helix");
+  const buttonHelix = document.getElementById("helix")!;
   buttonHelix.addEventListener("click", function () {
     transform(targets.helix, 2000);
   });
 
-  const buttonGrid = document.getElementById("grid");
+  const buttonGrid = document.getElementById("grid")!;
   buttonGrid.addEventListener("click", function () {
     transform(targets.grid, 2000);
   });
@@ -750,7 +757,7 @@ function init() {
   window.addEventListener("resize", onWindowResize);
 }
 
-function transform(targets, duration) {
+function transform(targets: THREE.Object3D[], duration: number) {
   TWEEN.removeAll();
 
   for (let i = 0; i < objects.length; i++) {
@@ -774,7 +781,7 @@ function transform(targets, duration) {
       .start();
   }
 
-  new TWEEN.Tween(this)
+  new TWEEN.Tween({})
     .to({}, duration * 2)
     .onUpdate(render)
     .start();
diff --git a/examples/css3d_sandbox.ts b/examples/css3d_sandbox.ts
index dd2c522..a3dc447 100644
--- a/examples/css3d_sandbox.ts
+++ b/examples/css3d_sandbox.ts
@@ -5,13 +5,15 @@ import {
   CSS3DRenderer,
   CSS3DObject,
 } from "three/addons/renderers/CSS3DRenderer.js";
-import { GUI } from "three/addons/libs/lil-gui.module.min.js";
+import { Controller, GUI } from "three/addons/libs/lil-gui.module.min.js";
 
-let camera, scene, renderer;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: THREE.WebGLRenderer;
 
-let scene2, renderer2;
+let scene2: THREE.Scene, renderer2: CSS3DRenderer;
 
-let controls;
+let controls: TrackballControls;
 
 init();
 animate();
@@ -43,7 +45,7 @@ function init() {
     const element = document.createElement("div");
     element.style.width = "100px";
     element.style.height = "100px";
-    element.style.opacity = i < 5 ? 0.5 : 1;
+    element.style.opacity = `${i < 5 ? 0.5 : 1}`;
     element.style.background = new THREE.Color(
       Math.random() * 0xffffff
     ).getStyle();
@@ -77,7 +79,7 @@ function init() {
   renderer2 = new CSS3DRenderer();
   renderer2.setSize(window.innerWidth, window.innerHeight);
   renderer2.domElement.style.position = "absolute";
-  renderer2.domElement.style.top = 0;
+  renderer2.domElement.style.top = "0";
   document.body.appendChild(renderer2.domElement);
 
   controls = new TrackballControls(camera, renderer2.domElement);
@@ -111,12 +113,12 @@ function createPanel() {
 
   const settings = {
     setViewOffset() {
-      folder1.children[1].enable().setValue(window.innerWidth);
-      folder1.children[2].enable().setValue(window.innerHeight);
-      folder1.children[3].enable().setValue(0);
-      folder1.children[4].enable().setValue(0);
-      folder1.children[5].enable().setValue(window.innerWidth);
-      folder1.children[6].enable().setValue(window.innerHeight);
+      (folder1.children[1] as Controller).enable().setValue(window.innerWidth);
+      (folder1.children[2] as Controller).enable().setValue(window.innerHeight);
+      (folder1.children[3] as Controller).enable().setValue(0);
+      (folder1.children[4] as Controller).enable().setValue(0);
+      (folder1.children[5] as Controller).enable().setValue(window.innerWidth);
+      (folder1.children[6] as Controller).enable().setValue(window.innerHeight);
     },
     fullWidth: 0,
     fullHeight: 0,
@@ -125,12 +127,12 @@ function createPanel() {
     width: 0,
     height: 0,
     clearViewOffset() {
-      folder1.children[1].setValue(0).disable();
-      folder1.children[2].setValue(0).disable();
-      folder1.children[3].setValue(0).disable();
-      folder1.children[4].setValue(0).disable();
-      folder1.children[5].setValue(0).disable();
-      folder1.children[6].setValue(0).disable();
+      (folder1.children[1] as Controller).setValue(0).disable();
+      (folder1.children[2] as Controller).setValue(0).disable();
+      (folder1.children[3] as Controller).setValue(0).disable();
+      (folder1.children[4] as Controller).setValue(0).disable();
+      (folder1.children[5] as Controller).setValue(0).disable();
+      (folder1.children[6] as Controller).setValue(0).disable();
       camera.clearViewOffset();
     },
   };
@@ -144,7 +146,7 @@ function createPanel() {
       window.screen.width * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ fullWidth: val }))
+    .onChange((val: number) => updateCameraViewOffset({ fullWidth: val }))
     .disable();
   folder1
     .add(
@@ -154,19 +156,19 @@ function createPanel() {
       window.screen.height * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ fullHeight: val }))
+    .onChange((val: number) => updateCameraViewOffset({ fullHeight: val }))
     .disable();
   folder1
     .add(settings, "offsetX", 0, 256, 1)
-    .onChange((val) => updateCameraViewOffset({ x: val }))
+    .onChange((val: number) => updateCameraViewOffset({ x: val }))
     .disable();
   folder1
     .add(settings, "offsetY", 0, 256, 1)
-    .onChange((val) => updateCameraViewOffset({ y: val }))
+    .onChange((val: number) => updateCameraViewOffset({ y: val }))
     .disable();
   folder1
     .add(settings, "width", window.screen.width / 4, window.screen.width * 2, 1)
-    .onChange((val) => updateCameraViewOffset({ width: val }))
+    .onChange((val: number) => updateCameraViewOffset({ width: val }))
     .disable();
   folder1
     .add(
@@ -176,7 +178,7 @@ function createPanel() {
       window.screen.height * 2,
       1
     )
-    .onChange((val) => updateCameraViewOffset({ height: val }))
+    .onChange((val: number) => updateCameraViewOffset({ height: val }))
     .disable();
   folder1.add(settings, "clearViewOffset");
 }
@@ -188,6 +190,13 @@ function updateCameraViewOffset({
   y,
   width,
   height,
+}: {
+  fullWidth?: number;
+  fullHeight?: number;
+  x?: number;
+  y?: number;
+  width?: number;
+  height?: number;
 }) {
   if (!camera.view) {
     camera.setViewOffset(
diff --git a/examples/css3d_sprites.ts b/examples/css3d_sprites.ts
index ce6d238..23f3e9e 100644
--- a/examples/css3d_sprites.ts
+++ b/examples/css3d_sprites.ts
@@ -7,12 +7,14 @@ import {
   CSS3DSprite,
 } from "three/addons/renderers/CSS3DRenderer.js";
 
-let camera, scene, renderer;
-let controls;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: CSS3DRenderer;
+let controls: TrackballControls;
 
 const particlesTotal = 512;
-const positions = [];
-const objects = [];
+const positions: number[] = [];
+const objects: CSS3DSprite[] = [];
 let current = 0;
 
 init();
@@ -33,7 +35,7 @@ function init() {
   const image = document.createElement("img");
   image.addEventListener("load", function () {
     for (let i = 0; i < particlesTotal; i++) {
-      const object = new CSS3DSprite(image.cloneNode());
+      const object = new CSS3DSprite(image.cloneNode() as typeof image);
       (object.position.x = Math.random() * 4000 - 2000),
         (object.position.y = Math.random() * 4000 - 2000),
         (object.position.z = Math.random() * 4000 - 2000);
@@ -105,7 +107,7 @@ function init() {
 
   renderer = new CSS3DRenderer();
   renderer.setSize(window.innerWidth, window.innerHeight);
-  document.getElementById("container").appendChild(renderer.domElement);
+  document.getElementById("container")!.appendChild(renderer.domElement);
 
   //
 
@@ -143,7 +145,7 @@ function transition() {
       .start();
   }
 
-  new TWEEN.Tween(this)
+  new TWEEN.Tween({})
     .to({}, duration * 3)
     .onComplete(transition)
     .start();
diff --git a/examples/css3d_youtube.ts b/examples/css3d_youtube.ts
index f717a9a..4d60375 100644
--- a/examples/css3d_youtube.ts
+++ b/examples/css3d_youtube.ts
@@ -6,10 +6,12 @@ import {
   CSS3DObject,
 } from "three/addons/renderers/CSS3DRenderer.js";
 
-let camera, scene, renderer;
-let controls;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: CSS3DRenderer;
+let controls: TrackballControls;
 
-function Element(id, x, y, z, ry) {
+function Element(id: string, x: number, y: number, z: number, ry: number) {
   const div = document.createElement("div");
   div.style.width = "480px";
   div.style.height = "360px";
@@ -33,7 +35,7 @@ init();
 animate();
 
 function init() {
-  const container = document.getElementById("container");
+  const container = document.getElementById("container")!;
 
   camera = new THREE.PerspectiveCamera(
     50,
@@ -50,10 +52,10 @@ function init() {
   container.appendChild(renderer.domElement);
 
   const group = new THREE.Group();
-  group.add(new Element("SJOz3qjfQXU", 0, 0, 240, 0));
-  group.add(new Element("Y2-xZ-1HE-Q", 240, 0, 0, Math.PI / 2));
-  group.add(new Element("IrydklNpcFI", 0, 0, -240, Math.PI));
-  group.add(new Element("9ubytEsCaS0", -240, 0, 0, -Math.PI / 2));
+  group.add(Element("SJOz3qjfQXU", 0, 0, 240, 0));
+  group.add(Element("Y2-xZ-1HE-Q", 240, 0, 0, Math.PI / 2));
+  group.add(Element("IrydklNpcFI", 0, 0, -240, Math.PI));
+  group.add(Element("9ubytEsCaS0", -240, 0, 0, -Math.PI / 2));
   scene.add(group);
 
   controls = new TrackballControls(camera, renderer.domElement);
@@ -63,7 +65,7 @@ function init() {
 
   // Block iframe events when dragging camera
 
-  const blocker = document.getElementById("blocker");
+  const blocker = document.getElementById("blocker")!;
   blocker.style.display = "none";
 
   controls.addEventListener("start", function () {
diff --git a/examples/games_fps.ts b/examples/games_fps.ts
index 9036298..1d24751 100644
--- a/examples/games_fps.ts
+++ b/examples/games_fps.ts
@@ -44,7 +44,7 @@ directionalLight.shadow.radius = 4;
 directionalLight.shadow.bias = -0.00006;
 scene.add(directionalLight);
 
-const container = document.getElementById("container");
+const container = document.getElementById("container")!;
 
 const renderer = new THREE.WebGLRenderer({ antialias: true });
 renderer.setPixelRatio(window.devicePixelRatio);
@@ -56,9 +56,9 @@ renderer.toneMapping = THREE.ACESFilmicToneMapping;
 container.appendChild(renderer.domElement);
 
 const stats = new Stats();
-stats.domElement.style.position = "absolute";
-stats.domElement.style.top = "0px";
-container.appendChild(stats.domElement);
+stats.dom.style.position = "absolute";
+stats.dom.style.top = "0px";
+container.appendChild(stats.dom);
 
 const GRAVITY = 30;
 
@@ -70,7 +70,13 @@ const STEPS_PER_FRAME = 5;
 const sphereGeometry = new THREE.IcosahedronGeometry(SPHERE_RADIUS, 5);
 const sphereMaterial = new THREE.MeshLambertMaterial({ color: 0xbbbb44 });
 
-const spheres = [];
+interface Sphere {
+  mesh: THREE.Mesh;
+  collider: THREE.Sphere;
+  velocity: THREE.Vector3;
+}
+
+const spheres: Sphere[] = [];
 let sphereIdx = 0;
 
 for (let i = 0; i < NUM_SPHERES; i++) {
@@ -101,7 +107,7 @@ const playerDirection = new THREE.Vector3();
 let playerOnFloor = false;
 let mouseTime = 0;
 
-const keyStates = {};
+const keyStates: { [eventCode: string]: boolean | undefined } = {};
 
 const vector1 = new THREE.Vector3();
 const vector2 = new THREE.Vector3();
@@ -180,7 +186,7 @@ function playerCollisions() {
   }
 }
 
-function updatePlayer(deltaTime) {
+function updatePlayer(deltaTime: number) {
   let damping = Math.exp(-4 * deltaTime) - 1;
 
   if (!playerOnFloor) {
@@ -200,7 +206,7 @@ function updatePlayer(deltaTime) {
   camera.position.copy(playerCollider.end);
 }
 
-function playerSphereCollision(sphere) {
+function playerSphereCollision(sphere: Sphere) {
   const center = vector1
     .addVectors(playerCollider.start, playerCollider.end)
     .multiplyScalar(0.5);
@@ -263,7 +269,7 @@ function spheresCollisions() {
   }
 }
 
-function updateSpheres(deltaTime) {
+function updateSpheres(deltaTime: number) {
   spheres.forEach((sphere) => {
     sphere.collider.center.addScaledVector(sphere.velocity, deltaTime);
 
@@ -309,7 +315,7 @@ function getSideVector() {
   return playerDirection;
 }
 
-function controls(deltaTime) {
+function controls(deltaTime: number) {
   // gives a bit of air control
   const speedDelta = deltaTime * (playerOnFloor ? 25 : 8);
 
@@ -344,12 +350,14 @@ loader.load("collision-world.glb", (gltf) => {
   worldOctree.fromGraphNode(gltf.scene);
 
   gltf.scene.traverse((child) => {
-    if (child.isMesh) {
+    if ((child as THREE.Mesh).isMesh) {
       child.castShadow = true;
       child.receiveShadow = true;
 
-      if (child.material.map) {
-        child.material.map.anisotropy = 4;
+      if (((child as THREE.Mesh).material as THREE.MeshStandardMaterial).map) {
+        (
+          (child as THREE.Mesh).material as THREE.MeshStandardMaterial
+        ).map!.anisotropy = 4;
       }
     }
   });
@@ -359,7 +367,7 @@ loader.load("collision-world.glb", (gltf) => {
   scene.add(helper);
 
   const gui = new GUI({ width: 200 });
-  gui.add({ debug: false }, "debug").onChange(function (value) {
+  gui.add({ debug: false }, "debug").onChange(function (value: boolean) {
     helper.visible = value;
   });
 
diff --git a/examples/misc_animation_groups.ts b/examples/misc_animation_groups.ts
index 44a0c4b..bb9b126 100644
--- a/examples/misc_animation_groups.ts
+++ b/examples/misc_animation_groups.ts
@@ -2,8 +2,11 @@ import * as THREE from "three";
 
 import Stats from "three/addons/libs/stats.module.js";
 
-let stats, clock;
-let scene, camera, renderer, mixer;
+let stats: Stats, clock: THREE.Clock;
+let scene: THREE.Scene,
+  camera: THREE.PerspectiveCamera,
+  renderer: THREE.WebGLRenderer,
+  mixer: THREE.AnimationMixer;
 
 init();
 animate();
diff --git a/examples/misc_animation_keys.ts b/examples/misc_animation_keys.ts
index a36b495..271a884 100644
--- a/examples/misc_animation_keys.ts
+++ b/examples/misc_animation_keys.ts
@@ -2,8 +2,11 @@ import * as THREE from "three";
 
 import Stats from "three/addons/libs/stats.module.js";
 
-let stats, clock;
-let scene, camera, renderer, mixer;
+let stats: Stats, clock: THREE.Clock;
+let scene: THREE.Scene,
+  camera: THREE.PerspectiveCamera,
+  renderer: THREE.WebGLRenderer,
+  mixer: THREE.AnimationMixer;
 
 init();
 animate();
diff --git a/examples/misc_boxselection.ts b/examples/misc_boxselection.ts
index ab31b0e..47e2747 100644
--- a/examples/misc_boxselection.ts
+++ b/examples/misc_boxselection.ts
@@ -5,81 +5,80 @@ import Stats from "three/addons/libs/stats.module.js";
 import { SelectionBox } from "three/addons/interactive/SelectionBox.js";
 import { SelectionHelper } from "three/addons/interactive/SelectionHelper.js";
 
-let container, stats;
-let camera, scene, renderer;
+let container: HTMLDivElement, stats: Stats;
+let camera: THREE.PerspectiveCamera,
+  scene: THREE.Scene,
+  renderer: THREE.WebGLRenderer;
 
-init();
-animate();
+container = document.createElement("div");
+document.body.appendChild(container);
 
-function init() {
-  container = document.createElement("div");
-  document.body.appendChild(container);
+camera = new THREE.PerspectiveCamera(
+  70,
+  window.innerWidth / window.innerHeight,
+  1,
+  5000
+);
+camera.position.z = 1000;
 
-  camera = new THREE.PerspectiveCamera(
-    70,
-    window.innerWidth / window.innerHeight,
-    1,
-    5000
-  );
-  camera.position.z = 1000;
+scene = new THREE.Scene();
+scene.background = new THREE.Color(0xf0f0f0);
 
-  scene = new THREE.Scene();
-  scene.background = new THREE.Color(0xf0f0f0);
+scene.add(new THREE.AmbientLight(0x505050));
 
-  scene.add(new THREE.AmbientLight(0x505050));
+const light = new THREE.SpotLight(0xffffff, 1.5);
+light.position.set(0, 500, 2000);
+light.angle = Math.PI / 9;
 
-  const light = new THREE.SpotLight(0xffffff, 1.5);
-  light.position.set(0, 500, 2000);
-  light.angle = Math.PI / 9;
+light.castShadow = true;
+light.shadow.camera.near = 1000;
+light.shadow.camera.far = 4000;
+light.shadow.mapSize.width = 1024;
+light.shadow.mapSize.height = 1024;
 
-  light.castShadow = true;
-  light.shadow.camera.near = 1000;
-  light.shadow.camera.far = 4000;
-  light.shadow.mapSize.width = 1024;
-  light.shadow.mapSize.height = 1024;
+scene.add(light);
 
-  scene.add(light);
+const geometry = new THREE.BoxGeometry(20, 20, 20);
 
-  const geometry = new THREE.BoxGeometry(20, 20, 20);
+for (let i = 0; i < 200; i++) {
+  const object = new THREE.Mesh(
+    geometry,
+    new THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff })
+  );
 
-  for (let i = 0; i < 200; i++) {
-    const object = new THREE.Mesh(
-      geometry,
-      new THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff })
-    );
+  object.position.x = Math.random() * 1600 - 800;
+  object.position.y = Math.random() * 900 - 450;
+  object.position.z = Math.random() * 900 - 500;
 
-    object.position.x = Math.random() * 1600 - 800;
-    object.position.y = Math.random() * 900 - 450;
-    object.position.z = Math.random() * 900 - 500;
+  object.rotation.x = Math.random() * 2 * Math.PI;
+  object.rotation.y = Math.random() * 2 * Math.PI;
+  object.rotation.z = Math.random() * 2 * Math.PI;
 
-    object.rotation.x = Math.random() * 2 * Math.PI;
-    object.rotation.y = Math.random() * 2 * Math.PI;
-    object.rotation.z = Math.random() * 2 * Math.PI;
+  object.scale.x = Math.random() * 2 + 1;
+  object.scale.y = Math.random() * 2 + 1;
+  object.scale.z = Math.random() * 2 + 1;
 
-    object.scale.x = Math.random() * 2 + 1;
-    object.scale.y = Math.random() * 2 + 1;
-    object.scale.z = Math.random() * 2 + 1;
+  object.castShadow = true;
+  object.receiveShadow = true;
 
-    object.castShadow = true;
-    object.receiveShadow = true;
+  scene.add(object);
+}
 
-    scene.add(object);
-  }
+renderer = new THREE.WebGLRenderer({ antialias: true });
+renderer.setPixelRatio(window.devicePixelRatio);
+renderer.setSize(window.innerWidth, window.innerHeight);
 
-  renderer = new THREE.WebGLRenderer({ antialias: true });
-  renderer.setPixelRatio(window.devicePixelRatio);
-  renderer.setSize(window.innerWidth, window.innerHeight);
+renderer.shadowMap.enabled = true;
+renderer.shadowMap.type = THREE.PCFShadowMap;
 
-  renderer.shadowMap.enabled = true;
-  renderer.shadowMap.type = THREE.PCFShadowMap;
+container.appendChild(renderer.domElement);
 
-  container.appendChild(renderer.domElement);
+stats = new Stats();
+container.appendChild(stats.dom);
 
-  stats = new Stats();
-  container.appendChild(stats.dom);
+window.addEventListener("resize", onWindowResize);
 
-  window.addEventListener("resize", onWindowResize);
-}
+animate();
 
 function onWindowResize() {
   camera.aspect = window.innerWidth / window.innerHeight;
@@ -106,7 +105,7 @@ const helper = new SelectionHelper(renderer, "selectBox");
 
 document.addEventListener("pointerdown", function (event) {
   for (const item of selectionBox.collection) {
-    item.material.emissive.set(0x000000);
+    (item.material as THREE.MeshLambertMaterial).emissive.set(0x000000);
   }
 
   selectionBox.startPoint.set(
@@ -119,7 +118,9 @@ document.addEventListener("pointerdown", function (event) {
 document.addEventListener("pointermove", function (event) {
   if (helper.isDown) {
     for (let i = 0; i < selectionBox.collection.length; i++) {
-      selectionBox.collection[i].material.emissive.set(0x000000);
+      (
+        selectionBox.collection[i].material as THREE.MeshLambertMaterial
+      ).emissive.set(0x000000);
     }
 
     selectionBox.endPoint.set(
@@ -131,7 +132,9 @@ document.addEventListener("pointermove", function (event) {
     const allSelected = selectionBox.select();
 
     for (let i = 0; i < allSelected.length; i++) {
-      allSelected[i].material.emissive.set(0xffffff);
+      (allSelected[i].material as THREE.MeshLambertMaterial).emissive.set(
+        0xffffff
+      );
     }
   }
 });
@@ -146,6 +149,8 @@ document.addEventListener("pointerup", function (event) {
   const allSelected = selectionBox.select();
 
   for (let i = 0; i < allSelected.length; i++) {
-    allSelected[i].material.emissive.set(0xffffff);
+    (allSelected[i].material as THREE.MeshLambertMaterial).emissive.set(
+      0xffffff
+    );
   }
 });
